import com.vanniktech.maven.publish.SonatypeHost
import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar

plugins {
    id 'java'
    id "com.vanniktech.maven.publish" version "0.28.0"
    id 'signing'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'checkstyle'
}

allprojects {
    group = 'MaKer'
    version = '0.7.0'
}

subprojects {
    apply {
        plugin 'checkstyle'
    }

    checkstyle {
        maxWarnings = 0
        toolVersion = '9.3'
        configFile = file("${rootDir}/tool/naver-checkstyle-rules.xml")
        configProperties = ["suppressionFile": "${rootDir}/tool/naver-checkstyle-suppressions.xml"]

    }

    build {
        dependsOn 'checkstyleMain'
        dependsOn 'checkstyleTest'
    }
}

repositories {
    mavenCentral()
}

signing {
    useGpgCmd()
    sign publishing.publications
}

javadoc {
    exclude '**/maker-tests/**'
}

mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Empty(), true))

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    coordinates("io.github.yonggoose", "MaKer", "0.7.0")

    pom {
        name = "IDMaker"
        description = "library for ID Making"
        inceptionYear = "2024"
        url = "https://github.com/IDMaker-io/MaKer"
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "https://github.com/IDMaker-io/MaKer/blob/main/LICENSE"
            }
        }
        developers {
            developer {
                id = "YongGoose"
                name = "Yongjun Hong"
                url = "https://github.com/YongGoose"
            }
        }

        scm {
            connection = "scm:git:git://github.com/IDMaker-io/MaKer.git"
            developerConnection = "scm:git:ssh://github.com:IDMaker-io/MaKer.git"
            url = "https://github.com/IDMaker-io/MaKer/tree/main"
        }
    }
}

dependencies {
    // spring-boot web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3'

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto
    implementation 'org.springframework.security:spring-security-crypto'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk18on
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.78'

    // https://mvnrepository.com/artifact/com.google.apis/google-api-services-calendar
    implementation 'com.google.apis:google-api-services-calendar:v3-rev20240517-2.0.0'

    // https://mvnrepository.com/artifact/net.jqwik/jqwik
    implementation 'net.jqwik:jqwik:1.8.5'

}

tasks.register('aggregateJavadocs', Javadoc) {
    group = 'Documentation'
    description = 'Aggregates Javadoc API documentation of all subprojects.'

    def excludedModules = ['maker-tests']

    source subprojects.findAll { project ->
        !excludedModules.contains(project.name)
    }.collect { project ->
        project.sourceSets.main.allJava
    }

    classpath = files(subprojects.findAll { project ->
        !excludedModules.contains(project.name)
    }.collect { project ->
        project.sourceSets.main.compileClasspath
    })

    subprojects.findAll { project ->
        !excludedModules.contains(project.name)
    }.each { subproject ->
        subproject.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }

    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        use = true
        windowTitle = "MaKer API Documentation"
        docTitle = "MaKer API Documentation"
        header = "MaKer"
    }

    destinationDir = file("${rootProject.DEFAULT_BUILD_DIR_NAME}/docs/javadoc")
    failOnError = false
}

tasks.named('bootJar') {
    enabled = false
}
